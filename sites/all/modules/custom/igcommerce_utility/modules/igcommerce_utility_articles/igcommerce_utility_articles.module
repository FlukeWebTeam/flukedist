<?php

/**  
 * 
 *  Utility functions for Articles
 *
 **/

function igcommerce_utility_articles_permission() {
  return array(
    'administer igcommerce parameters' => array(
      'title' => t('Administer igcommerce parameters'),
      'description' => t('Update various custom settings for igcommerce.'),
    ),
  );
}


function igcommerce_utility_articles_menu() {

  $items = array();

  $items['admin/settings/igcommerce'] = array(
    'title' => 'IG Commerce configuration settings',
    'description' => 'Various configuration options that are stored in the database',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('igcommerce_utility_articles_admin'),
    'access arguments' => array('administer igcommerce parameters'),
    'type' => MENU_NORMAL_ITEM,
   );

  return $items;
}


function igcommerce_utility_articles_admin() { 

   $form = array();

   $form['default_banner_image'] = array(
      '#type' => 'textfield',
      '#title' => 'The default banner image URL',
      '#description' => t('The URL to the default banner image in the DAM'),
      '#default_value' => variable_get('default_banner_image', 'http://data.fluke.com/sites/default/files/solution-oil-gas-banner_placeholder-1920x290.jpg'),
      '#required' => TRUE,
   );

   $form['no_image_found_desktop'] = array(
      '#type' => 'textfield',
      '#title' => 'No image found for desktop resolution file name',
      '#description' => t('The name of the no image found image for desktops that is stored in the theme images directory'),
      '#default_value' => variable_get('no_image_found_desktop', 'no_image_available.jpg'),
      '#required' => TRUE,
   );

   $form['no_image_found_tablet'] = array(
      '#type' => 'textfield',
      '#title' => 'No image found for tablet resolution file name',
      '#description' => t('The name of the no image found image for tablets that is stored in the theme images directory'),
      '#default_value' => variable_get('no_image_found_tablet', 'no_image_available.jpg'),
      '#required' => TRUE,
   );

   $form['no_image_found_mobile'] = array(
      '#type' => 'textfield',
      '#title' => 'No image found for mobile resolution file name',
      '#description' => t('The name of the no image found image for mobile that is stored in the theme images directory'),
      '#default_value' => variable_get('no_image_found_mobile', 'no_image_available.jpg'),
      '#required' => TRUE,
   );

   $form['large_desktop_min_width'] = array(
      '#type' => 'textfield',
      '#title' => 'Large desktop minimum pixel width (without the px)',
      '#description' => t('Min width for large desktops, in pixels, without the px'),
      '#default_value' => variable_get('large_desktop_min_width', 1280),
      '#required' => TRUE,
   );

   $form['medium_desktop_max_width'] = array(
      '#type' => 'textfield',
      '#title' => 'Medium desktop maximum pixel width (without the px)',
      '#description' => t('Max width for medium desktops, in pixels, without the px'),
      '#default_value' => variable_get('medium_desktop_max_width', 1279),
      '#required' => TRUE,
   );

   $form['medium_desktop_min_width'] = array(
      '#type' => 'textfield',
      '#title' => 'Medium desktop minimum pixel width (without the px)',
      '#description' => t('Min width for medium desktops, in pixels, without the px'),
      '#default_value' => variable_get('medium_desktop_min_width', 1033),
      '#required' => TRUE,
   );

   $form['tablet_max_width'] = array(
      '#type' => 'textfield',
      '#title' => 'Tablet maximum pixel width (without the px)',
      '#description' => t('Max width for tablets, in pixels, without the px'),
      '#default_value' => variable_get('tablet_max_width', 1032),
      '#required' => TRUE,
   );

   $form['tablet_min_width'] = array(
      '#type' => 'textfield',
      '#title' => 'Tablet minimum pixel width (without the px)',
      '#description' => t('Min width for tablets, in pixels, without the px'),
      '#default_value' => variable_get('tablet_min_width', 768),
      '#required' => TRUE,
   );

   $form['mobile_max_width'] = array(
      '#type' => 'textfield',
      '#title' => 'Mobile maximum pixel width (without the px)',
      '#description' => t('Max width for mobile, in pixels, witout the px)'),
      '#default_value' => variable_get('mobile_max_width', 767),
      '#required' => TRUE,
   );


   return system_settings_form($form);

}

/***
 * IGCommerce Article custom blocks
 ***/

function igcommerce_utility_articles_block_info() { 

   $blocks['articles_toc_banner'] = array(
     'info' => t('Article TOC - Banner Image'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_h1'] = array(
     'info' => t('Article TOC - Display Title / H1'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_desc'] = array(
     'info' => t('Article TOC -  Description / Summary'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_category_listing'] = array(
     'info' => t('Article TOC - Category - Listing'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_sub_rel_products'] = array(
     'info' => t('Article TOC - Subc Rel Products'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_sub_rel_articles'] = array(
     'info' => t('Article TOC - Sub Rel Articles'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_subcategory_header'] = array(
     'info' => t('Article TOC - Subcategory - Header'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_nav'] = array(
     'info' => t('Article TOC - Nav'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_articles'] = array(
     'info' => t('Article TOC - Articles'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_url_resources'] = array(
     'info' => t('Article TOC - URL - Resources'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   $blocks['articles_toc_url_products'] = array(
     'info' => t('Article TOC - URL - Products'),
     'cache' => DRUPAL_CACHE_GLOBAL,
   );

   return $blocks; 

}


function igcommerce_utility_articles_block_view($delta = NULL) { 

   switch ( $delta ) { 

      case 'articles_toc_banner':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_toc_banner();
        break;    

      case 'articles_toc_h1':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_toc_h1();
        break;    

      case 'articles_toc_desc':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_toc_description();
        break;    

      case 'articles_toc_sub_rel_products':
        $block['subject'] = "Related Products";
        $block['content'] = igcommerce_utility_articles_toc_sub_rel_products();
        break;    

      case 'articles_toc_sub_rel_articles':
        $block['subject'] = "Related Articles";
        $block['content'] = igcommerce_utility_articles_toc_sub_rel_articles();
        break;    

      case 'articles_toc_nav':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_build_category_toc_nav();
        break;    

      case 'articles_toc_articles':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_build_category_toc_articles();
        break;    

      case 'articles_toc_url_resources':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_build_toc_url_resources();
        break;    

      case 'articles_toc_url_products':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_build_toc_url_products();
        break;    

      case 'articles_toc_category_listing':
        $block['subject'] = "";
        $block['content'] = igcommerce_utility_articles_category_toc_listing();
        break;    


      default:
         $block = array();
         break;

    }

    return $block;

}

/**
 * 
 *  This section generates the header information for all TOCs
 *  whether they are created through the URL builder taxonomy
 *  or from TOC content types.
 *
 *  The first check for all three elements is looking at the URL
 *  builder taxonomy to see if the indicator on the term says to use the information
 *  stored in the URL builder term, or to use the information from the 
 *  TOC content type.  The remainder of the code per block pulls the correct
 *  information and renders it as block output.
 *
 */

/**
 * Render the appropriate Banner for TOCs
 */
function igcommerce_utility_articles_toc_banner() { 

   $output = NULL;
   global $language;

   $term = igcommerce_utility_articles_get_term();

   // This should never be true, but just in case
   if (!$term) { 
     return $output;
   }

   $desktop_banner_image_uri = NULL;
   $tablet_banner_image_uri = NULL;
   $mobile_banner_image_uri = NULL;
   $desktop_image = FALSE;
   $tablet_image  = FALSE;
   $mobile_image  = FALSE;
   $alt = NULL;

   // if there is a banner on the term associated with this page then load the URLs. 
   // If not, the pattern in the else will be executed, looking for images in the 
   // parent terms of this pages term.

   if(sizeof($term->field_header_banner_vgr) > 0) { 
     $banners = entity_load('field_collection_item', array($term->field_header_banner_vgr['und'][0]['value']));
     foreach($banners as $banner) { 
        if (sizeof($banner->field_header_banner_image_uri) > 0) { 
           $desktop_banner_image_uri = $banner->field_header_banner_image_uri['und'][0]['url'];
        }
        if (sizeof($banner->field_header_banner_image_tb_uri) > 0) { 
           $tablet_banner_image_uri = $banner->field_header_banner_image_tb_uri['und'][0]['url'];
        }
        if (sizeof($banner->field_header_banner_image_mbl_ur) > 0) { 
           $mobile_banner_image_uri = $banner->field_header_banner_image_mbl_ur['und'][0]['url'];
        }
     }
     if (!is_null($desktop_banner_image_uri) ||
         !is_null($tablet_banner_image_uri) ||
         !is_null($mobile_banner_image_uri)) { 
           if (!is_null($desktop_banner_image_uri)) { 
             $desktop_image = $desktop_banner_image_uri;
           }
           if (!is_null($tablet_banner_image_uri)) { 
             $tablet_image = $tablet_banner_image_uri;
           }
           if (!is_null($mobile_banner_image_uri)) { 
             $tablet_image = $mobile_banner_image_uri;
           }
           if (sizeof($term->field_url_title[$language->language]) > 0) { 
             $alt = $term->field_url_title[$language->language][0]['value'];
           }  
      }  
   } else { 
       $parents = taxonomy_get_parents($term->tid);

       // if there weren't any parents then display the default banner.
       if (sizeof($parents) < 1) { 
           $default_banner = variable_get('default_banner_image', FALSE);
           $alt = $term->field_url_title[$language->language][0]['value'];
           $output = igcommerce_utility_determine_banner_image($default_banner, $default_banner, $default_banner, $alt);
           return $output;
       }

       $parent_banner = FALSE;
       foreach($parents as $parent) {  
          if (!$parent_banner) {
            $desktop_banner_image_uri = NULL;
            $tablet_banner_image_uri = NULL;
            $mobile_banner_image_uri = NULL;

            if(sizeof($parent->field_header_banner_vgr) > 0) {
               $banners = entity_load('field_collection_item', array($parent->field_header_banner_vgr['und'][0]['value']));

               foreach($banners as $banner) {
                  if (sizeof($banner->field_header_banner_image_uri) > 0) { 
                     $desktop_image = $banner->field_header_banner_image_uri['und'][0]['url'];
                  }
                  if (sizeof($banner->field_header_banner_image_tb_uri) > 0) { 
                     $tablet_image = $banner->field_header_banner_image_tb_uri['und'][0]['url'];
                  }
                  if (sizeof($banner->field_header_banner_image_mbl_ur) > 0) { 
                     $mobile_image = $banner->field_header_banner_image_mbl_ur['und'][0]['url'];
                  }
              }
            } else {
              if (!is_null($desktop_banner_image_uri) ||
                  !is_null($tablet_banner_image_uri) ||
                  !is_null($mobile_banner_image_uri)) { 
                     if (!is_null($desktop_banner_image_uri)) { 
                       $desktop_image = $desktop_banner_image_uri;
                     }
                     if (!is_null($tablet_banner_image_uri)) { 
                       $tablet_image = $tablet_banner_image_uri;
                     }
                     if (!is_null($mobile_banner_image_uri)) { 
                       $tablet_image = $mobile_banner_image_uri;
                     }
                     if (sizeof($term->field_url_title[$language->language]) > 0) { 
                       $alt = $term->field_url_title[$language->language][0]['value'];
                     }    
                     $parent_banner = TRUE;
              }
            }
        }
      }
   }

   $output = igcommerce_utility_determine_banner_image($desktop_image, $tablet_image, $mobile_image, $alt);

   return  $output;

}

/**
 * Render the appropriate Display Title as an H1 for TOCs
 */
function igcommerce_utility_articles_toc_h1() { 

   global $language;
   $output = NULL;

   $term = igcommerce_utility_articles_get_term();

   // This should never be true, but just in case
   if (!$term) { 
     return $output;
   }

   $url_parts = explode('/', $_GET['q']);

   if ($url_parts[0] == 'node') { 
      $node = node_load(array_pop($url_parts));
      $output = "<h1>" . $node->field_content_title[$language->language][0]['value'] . "</h1>";
   } else { 
      $output = "<h1>" . $term->field_content_title[$language->language][0]['value'] . "</h1>";
   }

   return $output;

}

/**
 * Output the appropriate Description for TOCs
 */
function igcommerce_utility_articles_toc_description() { 

   global $language;
   $output = NULL;

   $term = igcommerce_utility_articles_get_term();

   // This should never be true, but just in case
   if (!$term) { 
     return $output;
   }

   $url_parts = explode('/', $_GET['q']);

   if ($url_parts[0] == 'node') { 
      $node = node_load(array_pop($url_parts));
      if (sizeof($node->description_field) > 0) { 
          if (isset($node->description_field[$language->language])) { 
             $output = $node->description_field[$language->language][0]['value'];
          } else { 
             $output = $node->description_field['und'][0]['value'];
          }
      }
   } else { 
      if (sizeof($term->description_field) > 0) {
         if (isset($term->description_field[$language->language]))  { 
           $output = $term->description_field[$language->language][0]['value'];
         } else { 
            $output = $term->description_field['und'][0]['value'];
         }
      } 
   }

   return $output;


}



function igcommerce_utility_articles_get_term() { 

   $url_parts = explode('/', $_GET['q']);

   // determine whether this is a node based TOC or a URL taxonomy term based
   // TOC and grab the correct category
   if ($url_parts[0] === 'node') { 
     $alias = drupal_get_path_alias($_GET['q']);
     $alias_parts = explode("/", $alias);
     $category = array_pop($alias_parts);
   } else { 
      $category =  array_pop($url_parts);
   }

   $tid = NULL;

   $query = new EntityFieldQuery();
   $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'url_builder')
      ->fieldCondition('field_url_title', 'value', $category, '=');      

   $results = $query->execute();

   if (!$results || sizeof($results) < 1) { 
     return FALSE;
   }

   foreach($results['taxonomy_term'] as $key => $value) { 
      $tid = $key;
   }

   $term = taxonomy_term_load($tid);

   return $term;

}

/**
 * Determine what type of TOC this is -- one built from the URL builder taxonony
 * term or one from the TOC content type
 */
function igcommerce_utility_articles_get_toc_type($term) { 

   $toc_type = FALSE;

   if (sizeof($term->field_toc_type) > 0) { 
      if ($term->field_toc_type['und'][0]['value'] == 1) { 
         $toc_type = "URL";
      } else { 
         $toc_type = "TOC";
      }
              
   } else { 
     $toc_type = "TOC";
   }

   return $toc_type;

}





function igcommerce_utility_articles_build_toc_url_resources() { 

   $output = NULL;
   global $language;

   $url_parts = explode('/', $_GET['q']);
   $category =  array_pop($url_parts);

   $tid = NULL;

   $query = new EntityFieldQuery();
   $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'url_builder')
      ->fieldCondition('field_url_title', 'value', $category, '=');      

   $results = $query->execute();

   if (!$results || sizeof($results) < 1) { 
     return $output;
   }

   foreach($results['taxonomy_term'] as $key => $value) { 
      $tid = $key;
   }

   if (is_null($tid)) { 
      return $output;
   }

   $term = taxonomy_term_load($tid);

   if (isset($term->field_recommended_resources_coll) && sizeof($term->field_recommended_resources_coll) > 0) { 
     $output .= "<h3 class='pane-title'>Recommended resources</h3>";
     foreach($term->field_recommended_resources_coll['und'] as $resources) {         
       $resource_details = entity_load('field_collection_item', array($resources['value']));
       foreach($resource_details as $resource) { 
         if (isset($resource->field_related_articles['und'])) { 
           $node = node_load($resource->field_related_articles['und'][0]['target_id']);
           if ($node) { 
             $node_path_alias = $language->language . '/' . drupal_get_path_alias("node/" . $node->nid);
             $output .= "<div class='toc-article-related-resource-wrapper'>";
             $output .= "<div class='card'>";
             $output .= "<h5 class='toc-article-related-resource-title'>";
             $output .= '<a href="/' . $node_path_alias . '" alt="' . $node->field_content_title[$language->language][0]['value'] . '">';
             $output .= $node->field_content_title[$language->language][0]['value'];
             $output .= "</a>";
             $output .= "</h5>"; 
             $output .= "</div>"; 
             $output .= "</div>"; 
           }
         } else if (isset($resource->field_related_digital_assets_uri) && sizeof($resource->field_related_digital_assets_uri) > 0) { 
             $output .= "<div class='toc-article-related-resource-wrapper'>";
             $output .= "<div class='card'>";
             $output .= "<h5 class='toc-article-related-resource-title'>";
             $output .= '<a href="' . $resource->field_related_digital_assets_uri['und'][0]['url'] . '" alt="' . $resource->field_related_digital_assets_uri['und'][0]['alt'] . '">';
             $output .= $resource->field_related_digital_assets_uri['und'][0]['alt'];
             $output .= "</a>";
             $output .= "</h5>"; 
             $output .= "</div>"; 
             $output .= "</div>";          }        
       }
     }
   }

  return $output;

}



function igcommerce_utility_articles_build_toc_url_products() { 

   $output = NULL;
   global $language;

   $url_parts = explode('/', $_GET['q']);
   $category =  array_pop($url_parts);

   $tid = NULL;

   $query = new EntityFieldQuery();
   $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'url_builder')
      ->fieldCondition('field_url_title', 'value', $category, '=');      

   $results = $query->execute();

   if (!$results || sizeof($results) < 1) { 
     return $output;
   }

   foreach($results['taxonomy_term'] as $key => $value) { 
      $tid = $key;
   }

   if (is_null($tid)) { 
      return $output;
   }

   $term = taxonomy_term_load($tid);

   if (isset($term->field_related_products) && sizeof($term->field_related_products) > 0) { 
     $output .= "<h3 class='pane-title'>Recommended products</h3>";
     foreach($term->field_related_products['und'] as $related_product) { 
       $product = node_load($related_product['target_id']);
       $node_path_alias = $language->language . '/' . drupal_get_path_alias("node/" . $product->nid);
       if (sizeof($product->field_slideshow) < 1) { 
          $product_image = path_to_theme() . "/images/no_image_available.jpg";
       } else { 
          // to do -- once the DAM URI is working we need to display the first image in the slide show and not the no image
          $product_image = path_to_theme() . "/images/no_image_available.jpg";
       }

       $output .= "<div class='toc-article-related-product-wrapper'>";

       $output .= "<div class='card'>";       

       $output .= "<div class='toc-article-related-product-image'>";
       $output .= '<a href="/' . $node_path_alias . '" alt="' . $product->field_content_title[$language->language][0]['safe_value'] . '">';
       $output .= '<img src="/' . $product_image . '" alt="' . $product->field_content_title[$language->language][0]['safe_value'] . '" />';
       $output .= "</a>";
       $output .= "</div>"; // end of image

       $output .= "<h5 class='toc-article-related-product-title'>";
       $output .= '<a href="/' . $node_path_alias . '" alt="' . $product->field_content_title[$language->language][0]['safe_value'] . '">';
       $output .= $product->field_content_title[$language->language][0]['safe_value'];
       $output .= "</a>";
       $output .= "</h5>";  // end of title

       $output .= "<div class='toc-article-related-product-see-spec'>";
       $output .= "See specification";
       $output .= "</div>";

       $output .= "<div class='toc-article-related-product-download'>";
       $output .= "Download datasheet";
       $output .= "</div>";

       $output .= "</div>"; // end of card

       $output .= "</div>"; // end of wrapper
     }
   }

   return $output;

}


function igcommerce_utility_articles_build_category_toc_articles() { 

   $output = NULL;
   global $language;

   $url_parts = explode("/", $_GET['q']);
   $nid = array_pop($url_parts);

   if ($nid > 0) { 
       $node = node_load($nid);
   } else { 
      return $output;
   }

   if (isset($node->field_toc_related_articles) && sizeof($node->field_toc_related_articles) > 0) { 
      foreach($node->field_toc_related_articles['und'] as $card) { 
          $card_details = entity_load('field_collection_item', array($card['value']));

          foreach($card_details as $toc_card) { 

             $card_size_term= taxonomy_term_load($toc_card->field_card_size_toc['und'][0]['tid']);
             $card_size = strtolower($card_size_term->name);
             $toc_card_node = node_load($toc_card->field_related_articles['und'][0]['target_id']);
             $toc_card_alias = drupal_get_path_alias('node/' . $toc_card_node->nid, $language->language);

             $card_image_small = NULL;
             $card_image_medium = NULL;
             $card_image_large = NULL;

             if (sizeof($toc_card->field_related_articles['und'][0]['entity']->field_toc_image_small) > 0 &&
                 isset($toc_card->field_related_articles['und'][0]['entity']->field_toc_image_small[$language->language])) { 
                   $card_image_small = $toc_card->field_related_articles['und'][0]['entity']->field_toc_image_small[$language->language][0]['url'];
             }

             if (sizeof($toc_card->field_related_articles['und'][0]['entity']->field_toc_image_medium) > 0 &&
                 isset($toc_card->field_related_articles['und'][0]['entity']->field_toc_image_medium[$language->language])) { 
                   $card_image_medium = $toc_card->field_related_articles['und'][0]['entity']->field_toc_image_medium[$language->language][0]['url'];
             }

             if (sizeof($toc_card->field_related_articles['und'][0]['entity']->field_toc_image_large) > 0 &&
                 isset($toc_card->field_related_articles['und'][0]['entity']->field_toc_image_large[$language->language])) { 
                   $card_image_large = $toc_card->field_related_articles['und'][0]['entity']->field_toc_image_large[$language->language][0]['url'];
             }

             $card_images = igcommerce_utility_articles_get_article_toc_images($card_image_small, $card_image_medium, $card_image_large);


             switch($card_size) { 
                case "small":
                   $card_image = $card_images['mobile'];                         
                   break;

                case "medium":
                    $card_image = $card_images['tablet'];
                   break;

                case "large":
                   $card_image = $card_images['desktop'];
                   break;


                default:
                   $card_image = '<img src="/' . path_to_theme() . '/images/no_image_available.jpg" />';
                   break;


             }
             $node_path_alias = $language->language . '/' . drupal_get_path_alias("node/" . $toc_card_node->nid);
          }

          $output .= "<div class='toc_article_card_" . $card_size . "'>";
          $output .= "<div class='card'>";
          $output .= "<div class='toc_article_card_image_" . $card_size . "'>";

// prototype URL
// <a class="colorbox-node" href="blogs/my-example" data-inner-width="600" data-inner-height="600">My Example</a>

          if (isset($toc_card_node->field_content_title[$language->language])) { 
              $output .= '<a class="colorbox-node"  data-inner-width="65%" data-inner-height="90%" href="/' . $toc_card_alias . '"  alt="' . $toc_card_node->field_content_title[$language->language][0]['safe_value'] . '">';
          } else { 
              $output .= '<a class="colorbox-node"  data-inner-width="65%" data-inner-height="90%" href="/' . $toc_card_alias . '"  alt="' . $toc_card_node->field_content_title['und'][0]['safe_value'] . '">';
          }

          if (isset($toc_card_node->field_content_title[$language->language])) { 
              $output .= '<img src="' . $card_image . '" alt="' . $toc_card_node->field_content_title[$language->language][0]['safe_value'] . '"/>';
          } else { 
              $output .= '<img src="' . $card_image . '" alt="' . $toc_card_node->field_content_title['und'][0]['safe_value'] . '"/>';
          }

          $output .= "</a>";
          $output .= "</div>"; // end of image
          $output .= "<div class='toc_article_card_title'>";

         if (isset($toc_card_node->field_content_title[$language->language])) { 
            $output .= '<a class="colorbox-node" data-inner-width="65%" data-inner-height="90%" href="/' . $toc_card_alias . '"  alt="' . $toc_card_node->field_content_title[$language->language][0]['safe_value'] . '">';
         } else { 
            $output .= '<a class="colorbox-node" data-inner-width="65%" data-inner-height="90%" href="/' . $toc_card_alias . '"  alt="' . $toc_card_node->field_content_title['und'][0]['safe_value'] . '">';
         }
 
          if (isset($toc_card_node->field_content_title[$language->language])) { 
             $output .= $toc_card_node->field_content_title[$language->language][0]['safe_value'];
          } else { 
             $output .= $toc_card_node->field_content_title['und'][0]['safe_value'];
          }

          $output .= "</a>";
          $output .= "</div>"; // end of title
          $output .= "</div>";  // end of card
          $output .= "</div>"; // end of card size
      }
   }

   return $output;

}



function igcommerce_utility_articles_category_toc_listing() { 

   global $language;
   $output = NULL;
   $url_parts = explode('/', $_GET['q']);
   $category =  array_pop($url_parts);
   $vocab = taxonomy_vocabulary_machine_name_load('url_builder');

   $tid = NULL;

   $query = new EntityFieldQuery();
   $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'url_builder')
      ->fieldCondition('field_url_title', 'value', $category, '=');      

   $results = $query->execute();

   if (!$results || (sizeof($results) < 1)) { 
     return $output;
   }

   foreach($results['taxonomy_term'] as $key => $value) { 
      $tid = $key;
   }

   if (is_null($tid)) { 
      return $output;
   }

   $industry_tree = taxonomy_get_tree($vocab->vid, $tid, $max_depth = 1, $load_entities = TRUE);

   $output .= "<div class='toc-listing-image-wrapper'>";

   foreach($industry_tree as $industry_url_builder_term) {

      $toc_item_url = $_GET['q'] . "/" . $industry_url_builder_term->field_url_title[$language->language][0]['value'];

      // build the responsive images using the HTML picture functionality
      $desktop_alt       = NULL;
      $tablet_alt        = NULL;
      $mobile_alt        = NULL;
      $image_url_desktop = NULL;
      $image_url_tablet  = NULL;
      $image_url_mobile  = NULL;

      if (sizeof($industry_url_builder_term->field_category_image_toc_uri) > 0) {
         $image_url_desktop  = $industry_url_builder_term->field_category_image_toc_uri['und'][0]['url'];
      }

      if (sizeof($industry_url_builder_term->field_category_image_toc_tb_uri) > 0) {
         $image_url_tablet  = $industry_url_builder_term->field_category_image_toc_tb_uri['und'][0]['url'];
      }

      if (sizeof($industry_url_builder_term->field_category_image_toc_mbl_uri) > 0) {
         $image_url_mobile  = $industry_url_builder_term->field_category_image_toc_mbl_uri['und'][0]['url'];
      }

      $alt = $industry_url_builder_term->field_content_title[$language->language][0]['value'];

      // generate the output using the igcommerce_utility_fomrat_image
      $pic = igcommerce_utility_determine_toc_image($image_url_desktop, $image_url_tablet, $image_url_mobile, $alt);

      // Output the TOC item
      $output .= "<div class='toc-listing-item-wrapper'>";
      
        $output .= "<div class='toc-listing-image'>";
        $output .= "<a href='/" . $language->language . "/" . $toc_item_url . "'>";
        $output .= $pic;
        $output .= "</a>";
        $output .= "</div>"; // end of image

        $output .= "<div class='toc-listing-title'>";
        $output .= "<a href='/" . $language->language . "/" . $toc_item_url . "'>";
        $output .= "<h3 class='toc-listing-title-h3'>";
        $output .= $industry_url_builder_term->field_content_title[$language->language][0]['value'];
        $output .= "</h3>";
        $output .= "</a>";
        $output .= "</div>"; // end of title wrapper

      $output .= "</div>"; // end of item wrapper

   }

   $output .= "</div>"; // end of image wrapper


   return $output;

}



function igcommerce_utility_articles_subcategory_toc_header() { 

   $output = NULL;
   $tid    = NULL;

   $url_parts = explode('/', $_GET['q']);

   $category = array_pop($url_parts);
   $industry = array_pop($url_parts);

   $tid = NULL;

   $query = new EntityFieldQuery();
   $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', 'url_builder')
      ->fieldCondition('field_url_title', 'value', $category, '=');      

   $results = $query->execute();

   if (!results || (sizeof($results) < 1)) { 
     return $output;
   }

   foreach($results['taxonomy_term'] as $key => $value) { 
      $tid = $key;
   }

   if (is_null($tid)) { 
      return $output;
   }

   $output = views_embed_view('url_builder', 'article_toc_header', $tid);

   return $output;

}


function igcommerce_utility_articles_build_category_toc_listing() { 

   $output = NULL;

   $vocab = taxonomy_vocabulary_machine_name_load('url_builder');

   $url_parts = explode('/', $_GET['q']);

   $category = str_replace("-", " ", array_pop($url_parts));
   $industry = str_replace("-", " ", array_pop($url_parts));

   $industry_terms = taxonomy_get_term_by_name($industry, 'url_builder');

   $itid = NULL;

   foreach($industry_terms as $industry_term) { 
     $itid = $industry_term->tid;
   }

   if (is_null($itid)) { 
     return $output;
   }

   $industry_tree = taxonomy_get_tree($vocab->vid, $itid, $max_depth = 1, $load_entities = TRUE);

   $search_tid = NULL;

   foreach($industry_tree as $subcategory) { 
      if (strtolower($subcategory->name) === strtolower($category)) { 
         $search_tid = $subcategory->tid;
      }
   }

   $output = views_embed_view('article', 'article_industry_subcategory_toc', $search_tid);

   return $output;

}


function igcommerce_utility_articles_toc_sub_rel_products() { 

   $output = NULL;  

   $vocab = taxonomy_vocabulary_machine_name_load('url_builder');

   $url_parts = explode('/', $_GET['q']);

   $category = str_replace("-", " ", array_pop($url_parts));
   $industry = str_replace("-", " ", array_pop($url_parts));

   $category_term = taxonomy_get_term_by_name($category, 'url_builder');

   $tid = NULL;

   foreach($category_term as $term) { 
      $tid = $term->tid;
   }

   if (is_null($tid)) { 
      return $output;
   }

   $output = views_embed_view('url_builder', 'url_builder_related_products', $tid);

   return $output;


}

function igcommerce_utility_articles_toc_sub_rel_articles() { 

   $output = NULL;

   $url_parts = explode('/', $_GET['q']);
   $category = str_replace("-", " ", array_pop($url_parts));

   $category_term = taxonomy_get_term_by_name($category, 'url_builder');

   $tid = NULL;

   foreach($category_term as $term) { 
      $tid = $term->tid;
   }

   if (is_null($tid)) { 
      return $output;
   }

   $output = views_embed_view('url_builder', 'url_builder_related_resources', $tid);

   return $output;

}


/**
 * Build the left nav for article TOC pages
 */
function igcommerce_utility_articles_build_category_toc_nav() { 

    global $language;
    global $base_url;
    $output = NULL;

    $url_path = drupal_get_path_alias();

    $url_path_parts = explode("/", $url_path);

   // the source of the menu tree is the second item in the path
   // such as solutions/industries  or solutions/applications 

    if (sizeof($url_path_parts) > 1) { 
       if ($url_path_parts[1] === "industries") { 
         $toc_menu_term = $url_path_parts[1];
       } else { 
         $toc_menu_term = $url_path_parts[0];
       }
    } else { 
      $toc_menu_term = $url_path_parts[0];
    } 

    $menu_terms =taxonomy_get_term_by_name($toc_menu_term, 'url_builder');

    foreach($menu_terms as $mterm) { 
      $menu_term = $mterm;
    }

    if (!isset($menu_term ) || !$menu_term || $menu_term->tid < 1) { 
      return $output;
    }

    $vocab = taxonomy_vocabulary_machine_name_load('url_builder');

    $terms = taxonomy_get_tree($vocab->vid, $menu_term->tid, 1, TRUE); // Use the correct vocabulary id.

    /* allows menu to appear as dropdown list on mobile */
    $output .= '<div class="custom-collapse">'; 
    /* mobile dropdown menu button */
    $output .= '
    <button class="btn btn-block collapse-toggle visible-xs visible-sm" type="button" data-toggle="collapse" data-parent="custom-collapse" data-target="#accordion" aria-expanded="false">
      <span class="">Toggle navigation</span>
      <span class="pull-right">
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      <span class="icon-bar"></span>
      </span>
    </button>';

    $output .= '<div class="panel-group collapse in" id="accordion" aria-expanded="true">'; 

    foreach ($terms as $menu_item) { 

      $children = taxonomy_get_children($menu_item->tid); 

      if (sizeof($children) > 0) { 

             $output .= '<div class="panel panel-default">';
             $output .= '<div class="panel-heading">';
             $output .= '<h4 class="panel-title">';

             $path = igcommerce_utility_articles_build_url($menu_item);
            
             if ($path->type === 'auto') { 
                 $parent_path = $path->link;
                 $output .= '<a href="' . $base_url . "/" . $language->language . "/" . $path->link . '">';
             } else { 
                 $parent_path = NULL;
                 $output .= '<a href="' . $path->link . '">';
             }

 
             if (isset($menu_item->field_content_title[$language->language])) {              
                $output .= $menu_item->field_content_title[$language->language][0]['value'];
             } else { 
                $output .= $menu_item->name;
             }

             $output .= '</a>';
             $output .= '</h4>';
             
             if (strpos($url_path, $path->link) === FALSE) {
              $output .= '<a data-toggle="collapse" class="collapsed plus-minus pull-right" data-parent="#accordion" href="#collapse-' . $menu_item->tid . '">';
             }
             else {
              $output .= '<a data-toggle="collapse" class="plus-minus pull-right" data-parent="#accordion" href="#collapse-' . $menu_item->tid . '" aria-expanded="true">';
             }
             //$output .= "&nbsp;+&nbsp;";
             $output .= '</a>';
             $output .= '</div>';
             
             if (strpos($url_path, $path->link) === FALSE) {
              $output .= '<div id="collapse-' . $menu_item->tid . '" class="panel-collapse collapse">';
             }
             else {
              $output .= '<div id="collapse-' . $menu_item->tid . '" class="panel-collapse collapse in" aria-expanded="true">';
             }
             $output .= '<div class="panel-body">';

             foreach($children as $child) { 

               $path = igcommerce_utility_articles_build_child_url($parent_path, $child);
               if (!is_null($path)) { 
                   $output .= "<div class='child-menu-item'>";

                   if ($path->type === 'auto') { 
                      $output .= '<a href="' . $base_url .  "/" . $language->language . "/". $path->link . '">';
                   } else { 
                      $output .= '<a href="' . $path->link . '">';
                   }

                   if (isset($child->field_content_title[$language->language])) {     
                    $output .= $child->field_content_title[$language->language][0]['value'];
                   } else { 
                    $output .= $child->name;
                   }
                   $output .= '</a>';
                   $output .= "</div>";
               } // end of check to see if path is null

             } // end of processing children

             $output .= '</div>';
             $output .= '</div>';
             $output .= '</div>';

            } elseif(($menu_item->depth == 0  && !is_null($menu_item->depth) ) && sizeof($children) == 0 ) {  // its a parent term without children

             //if (!is_null($path)) { 

               $output .= '<div class="panel panel-default">';
             
               $output .= '<div class="panel-heading">';
               $output .= '<h4 class="panel-title">';

               $path2 = igcommerce_utility_articles_build_url($menu_item);

               if ($path2->type === 'auto') { 
                  $output .= '<a href="' . $base_url . "/" . $language->language . "/". $path2->link . '">';
               } else { 
                  $output .= '<a href="' . $path2->link . '">';
               }


               if (isset($menu_item->field_content_title[$language->language])) {              
                  $output .= $menu_item->field_content_title[$language->language][0]['value'];
               } else { 
                  $output .= $menu_item->name;
               }

               $output .= '</a>';
               $output .= '</h4>';
               $output .= '</div>'; // end of heading
             
               $output .= '</div> ';  // end of default

             // } // end of is path null
          //}
      }

  }

  $output .= "</div>"; // end of class panel-group
  $output .= "</div><!-- /.custom-collapse -->";

  return $output;
  

}

function igcommerce_utility_articles_build_url($menu_item) { 

   global $language;

   $lang = $language->language;

   $created_path = new stdClass;

   if (isset($menu_item->field_url[$lang][0])) { 
       $created_path->link = $menu_item->field_url[$lang][0]['url'];
       $created_path->type = 'manual';
       return $created_path;
   }

   $path = "";

   $parents = array_reverse(taxonomy_get_parents_all($menu_item->tid));
   array_pop($parents);

   if (sizeof($parents) > 0) { 
       foreach($parents as $parent) { 
         $path .= $parent->field_url_title[$language->language][0]['safe_value'] . "/";
       }
   }

   $path .= $menu_item->field_url_title[$language->language][0]['safe_value'];

   $created_path->link = $path;
   $created_path->type = 'auto';

   return $created_path;

}

function igcommerce_utility_articles_build_child_url($parent_path, $child_item) { 

   global $language;
   $lang = $language->language;

   $created_path = new stdClass;

   if (isset($child_item->field_url[$lang][0])) { 
       $created_path->link = $menu_item->field_url[$lang][0]['url'];
       $created_path->type = 'manual';
       return $created_path;
   }

   $created_path->type = 'auto';
   $created_path->link = $parent_path . "/" . str_replace(" ", "-", strtolower($child_item->field_url_title[$language->language][0]['value']));
   
   return $created_path;
}

/** 
 * Generate an image based on the HTML picture tab
 * Requires you pass the desktop, tablet, and mobile URI and the alt
 */
function igcommerce_utility_format_image($image_url_desktop, $image_url_tablet, $image_url_mobile, $alt) { 

   $output  = '<picture>';
   $output .= '<source srcset="' . $image_url_desktop . '" media="(min-width: ' . variable_get('large_desktop_min_width', 1280) . 'px)" />';
   $output .= '<source srcset="' . $image_url_desktop . '" media="(min-width: ' . variable_get('medium_desktop_min_width', 1033) . 
    'px) and (max-width: ' . variable_get('medium_desktop_nax_width', 1279) . 'px)" />';
   $output .= '<source srcset="' . $image_url_tablet . '" media="(min-width: ' . variable_get('tablet_max_width', 768)  . 'px) and (max-width: ' . variable_get('tablet_max_width', 1032) . 'px)" />';
   $output .= '<source srcset="' . $image_url_mobile . '" media="(max-width: ' . variable_get('mobile_max_width', 767)   . '767px)" />';
   $output .= '<img class="lazyload" src="'. $image_url_desktop . '" alt="' . $alt . '" />';
   $output .= '</picture>';

   return $output;

}


/**
 * Return a no image found URI
 */
function igcommerce_utility_no_image_found($size = 'desktop') { 

      $path_to_image = "/" . path_to_theme() . '/images/';

      switch($size) { 

        case 'desktop':
           $path_to_image .= variable_get('no_image_found_desktop', NULL);
           break;

        case 'tablet':
           $path_to_image .= variable_get('no_image_found_tablet', NULL);
           break;

        case 'mobile':
           $path_to_image .= variable_get('no_image_found_mobile', NULL);
           break;

        default: 
           $path_to_image .= variable_get('no_image_found_desktop', NULL);
           break;

      }


  return $path_to_image;

}


/**
 * Handle the various scenarios where there are three possible images - desktop, tablet, and mobile
 * And only some of those images exist.
 */

function igcommerce_utility_determine_banner_image($image_url_desktop = FALSE, $image_url_tablet = FALSE, $image_url_mobile = FALSE, $alt = NULL) { 

   $default_banner = variable_get('default_banner_image', 'http://data.fluke.com/sites/default/files/solution-oil-gas-banner_placeholder-1920x290.jpg');

   $banner_images = array();

   /** the following scenarios may occur with banner images -- editorial may load
       one or more of the following:  desktop, tablet, and mobile

       Scenario  Desktop Tablet  Mobile
           1        Y      Y      Y
           2        Y      Y      N
           3        Y      N      N
           4        Y      N      Y
           5        N      Y      Y
           6        N      N      Y
           7        N      Y      N
           8        N      N      N
   **/

   // scenario 1
   if ($image_url_desktop && $image_url_tablet && $image_url_mobile) { 
      $banner_images['desktop'] = $image_url_desktop;
      $banner_images['tablet'] = $image_url_tablet;
      $banner_images['mobile'] = $image_url_mobile;
   }

   // scenario 2
   if ($image_url_desktop && $image_url_tablet && !$image_url_mobile) { 
      $banner_images['desktop'] = $image_url_desktop;
      $banner_images['tablet'] = $image_url_tablet;
      $banner_images['mobile'] = $image_url_tablet;
   }

   // scenario 3
   if ($image_url_desktop && !$image_url_tablet && !$image_url_mobile) { 
      $banner_images['desktop'] = $image_url_desktop;
      $banner_images['tablet'] = $image_url_desktop;
      $banner_images['mobile'] = $image_url_desktop;
   }

   // scenario 4
   if ($image_url_desktop && !$image_url_tablet && $image_url_mobile) { 
      $banner_images['desktop'] = $image_url_desktop;
      $banner_images['tablet'] = $image_url_desktop;
      $banner_images['mobile'] = $image_url_mobile;
   }

   // Scenario 5
   if (!$image_url_desktop && $image_url_tablet && $image_url_mobile) { 
      $banner_images['desktop'] = $image_url_tablet;
      $banner_images['tablet'] = $image_url_tablet;
      $banner_images['mobile'] = $image_url_mobile;
   }

   // scenario 6
   if (!$image_url_desktop && !$image_url_tablet && $image_url_mobile) { 
      $banner_images['desktop'] = $image_url_mobile;
      $banner_images['tablet'] = $image_url_mobile;
      $banner_images['mobile'] = $image_url_mobile;
   }

   // scenario 7
   if (!$image_url_desktop && $image_url_tablet && !$image_url_mobile) { 
      $banner_images['desktop'] = $image_url_tablet;
      $banner_images['tablet'] = $image_url_tablet;
      $banner_images['mobile'] = $image_url_tablet;
   }

   // scenario 8
   if (!$image_url_desktop && !$image_url_tablet && !$image_url_mobile) { 
      $banner_images['desktop'] = $default_banner;
      $banner_images['tablet'] = $default_banner;
      $banner_images['mobile'] = $default_banner;
   }

   return igcommerce_utility_format_image($banner_images['desktop'], $banner_images['tablet'], $banner_images['mobile'], $alt);

}


/**
 * Handle the various scenarios where there are three possible images - desktop, tablet, and mobile
 * And only some of those images exist.
 */

function igcommerce_utility_determine_toc_image($image_url_desktop = FALSE, $image_url_tablet = FALSE, $image_url_mobile = FALSE, $alt = NULL) { 

   $default_image = variable_get('no_image_found_desktop', '/sites/all/themes/figstrap/images/no_image_available.jpg');

   $article_images = array();

   /** the following scenarios may occur with banner images -- editorial may load
       one or more of the following:  desktop, tablet, and mobile

       Scenario  Desktop Tablet  Mobile
           1        Y      Y      Y
           2        Y      Y      N
           3        Y      N      N
           4        Y      N      Y
           5        N      Y      Y
           6        N      N      Y
           7        N      Y      N
           8        N      N      N
   **/

   // scenario 1
   if ($image_url_desktop && $image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_mobile;
   }

   // scenario 2
   if ($image_url_desktop && $image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_tablet;
   }

   // scenario 3
   if ($image_url_desktop && !$image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_desktop;
      $article_images['mobile'] = $image_url_desktop;
   }

   // scenario 4
   if ($image_url_desktop && !$image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_desktop;
      $article_images['mobile'] = $image_url_mobile;
   }

   // Scenario 5
   if (!$image_url_desktop && $image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_tablet;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_mobile;
   }

   // scenario 6
   if (!$image_url_desktop && !$image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_mobile;
      $article_images['tablet'] = $image_url_mobile;
      $article_images['mobile'] = $image_url_mobile;
   }

   // scenario 7
   if (!$image_url_desktop && $image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $image_url_tablet;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_tablet;
   }

   // scenario 8
   if (!$image_url_desktop && !$image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $default_image;
      $article_images['tablet'] = $default_image;
      $article_images['mobile'] = $default_image;
   }

   return igcommerce_utility_format_image($article_images['desktop'], $article_images['tablet'], $article_images['mobile'], $alt);

}

function igcommerce_utility_articles_get_article_toc_images($image_url_mobile = NULL, $image_url_tablet = NULL, $image_url_desktop = NULL) { 

   $default_image = variable_get('no_image_found_desktop', '/sites/all/themes/figstrap/images/no_image_available.jpg');

   $article_images = array();

   /** the following scenarios may occur with banner images -- editorial may load
       one or more of the following:  desktop, tablet, and mobile

       Scenario  Desktop Tablet  Mobile
           1        Y      Y      Y
           2        Y      Y      N
           3        Y      N      N
           4        Y      N      Y
           5        N      Y      Y
           6        N      N      Y
           7        N      Y      N
           8        N      N      N
   **/

   // scenario 1
   if ($image_url_desktop && $image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_mobile;
   }

   // scenario 2
   if ($image_url_desktop && $image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_tablet;
   }

   // scenario 3
   if ($image_url_desktop && !$image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_desktop;
      $article_images['mobile'] = $image_url_desktop;
   }

   // scenario 4
   if ($image_url_desktop && !$image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_desktop;
      $article_images['tablet'] = $image_url_desktop;
      $article_images['mobile'] = $image_url_mobile;
   }

   // Scenario 5
   if (!$image_url_desktop && $image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_tablet;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_mobile;
   }

   // scenario 6
   if (!$image_url_desktop && !$image_url_tablet && $image_url_mobile) { 
      $article_images['desktop'] = $image_url_mobile;
      $article_images['tablet'] = $image_url_mobile;
      $article_images['mobile'] = $image_url_mobile;
   }

   // scenario 7
   if (!$image_url_desktop && $image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $image_url_tablet;
      $article_images['tablet'] = $image_url_tablet;
      $article_images['mobile'] = $image_url_tablet;
   }

   // scenario 8
   if (!$image_url_desktop && !$image_url_tablet && !$image_url_mobile) { 
      $article_images['desktop'] = $default_image;
      $article_images['tablet'] = $default_image;
      $article_images['mobile'] = $default_image;
   }

   return $article_images; 

}
