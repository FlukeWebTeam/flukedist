<?php
function dam_form_form_alter(&$form, &$form_state, $form_id) {
  // set up the action for the different forms on submit
  switch ($form_id) {
    case 'dam_form_search_form':
      $form['#action'] = '/dam_uri_search/ajax';
      break;
    case 'dam_form_upload_form':
      $form['#action'] = '/dam_uri_upload/ajax';
      break;
    case 'dam_form_search_filter_form':
      $form['#action'] = '/dam_uri_search_filter/ajax';
      break;
    case 'dam_form_upload_type_form':
      $form['#action'] = '/dam_uri_upload_type/ajax';
      break;
    default:
      break;
  }
}

/**
 * Drupal form to be put in a modal.
 */
function dam_form_upload_form($form, $form_state) {
  if($form_state['input']['form_id'] == 'dam_form_upload_type_form') {
    $form = array();

    //get json of content types and parse it
    $data = dam_api_get_supported_content_types();
    $json_a = drupal_json_decode($data);
    
    //set up the radio buttons options from the json
    $options = array();
    foreach($json_a as $key => $value) {
     $options[$json_a[$key]] = $json_a[$value];
    }
  
    //set up the radio butons with the options
    if(array_key_exists('choose_type', $form_state['input'])){
      $form['choose_type'] = array(
        '#type' => 'hidden',
        '#default_value' => $form_state['input']['choose_type'],
      );
    }
    
    //set up the text field with the title
    $form['upload_asset_title'] = array(
      '#type' => 'textfield',
      '#title' => t("Title:"),
      '#required' => TRUE,
    ); 
    
    //get json of filters and parse it
    $data = dam_api_get_metadata(array( "content_types['". $form_state['input']['choose_type']."']" => $form_state['input']['choose_type']));
    $json_a = drupal_json_decode($data);
   
    $selectmenus = array();
    $checkoptions = array();
    
    //set up fields to edit for uploading content
    foreach($json_a as $mainkey => $mainvalue){
      foreach($mainvalue as $key => $value) {
        //if the field in content is text area or text field then set up textfield
        if(array_key_exists('widget', $value) && ($value['widget']['type'] == 'text_textarea' || $value['widget']['type'] == 'text_textfield' 
        || $value['widget']['type'] == 'youtube')) {
          //set up text fields and text areas for required fields and non required fields
          if($value['required'] == 0) {
            $form['upload_asset_' . $key] = array(
              '#type' => 'textfield',
              '#title' => $value['label'] . ":",
            ); 
          } else {
            $form['upload_asset_' . $key] = array(
              '#type' => 'textfield',
              '#title' => $value['label'] . ":",
              '#required' => TRUE,
              //'#element_validate' => array('dam_uri_upload_required_validate'),
            ); 
          }
        }
        /*if(array_key_exists('widget', $value) && ($value['widget']['module'] == 'file' || $value['widget']['module'] == 'image')) {
          //set up text fields and text areas
          $form['upload_asset_' . $key] = array(
            '#type' => 'file',
            '#title' => t('Upload File:'),
            '#element_validate' => array('dam_uri_upload_file_validate'),
          );
        }*/
        /*
        //if filter is taxonomy and isn't Product Category then set up select menu
        if (!array_key_exists('label', $value) && $key != "Product Category"){
          $selectoptions = array();
          $selectoptions['all'] = t('- Any -');
          
          //set up taxonomy filter select menu options
          foreach($value as $subkey=>$subvalue){
            $selectoptions[$subvalue['tid']] = $subvalue['name'];
          }
          
          //set up taxonomy filter select menu
          $form['upload_asset_'.$key] = array(
            '#type' => 'select',
            '#title' => t($key.':'),
            '#options' => $selectoptions,
          );
          //save the taxonomy filter names for use later
          $selectmenus[] = 'choose_'.$key;
        }
        */
      }
    }
    
    //set up back button
    $form['back'] = array(
      '#type' => 'button',
      '#value' => t('Back'),
      '#limit_validation_errors' => array(),
      '#ajax' => array(
        'callback' => 'dam_uri_upload_type_callback', )
    ); 
    
    //set up the submit button
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
  
    return $form;
  }
} 
/*function dam_uri_views_pre_render(&$view) {
dpm($view);
}*/

/**
 * Drupal form to be put in a modal.
 */
function dam_form_search_form($form, $form_state) {
    $form = array();

    //get the array of taxonomy filters being used
    $taxonomyfilters = array();
    $taxonomyfilters = dam_form_filter_taxonomy($form_state['input'], "filter_");//, array("0" => "all"));array_diff(  
    
    if(array_key_exists('choose_filter_type', $form_state['input'])){
      //sets filters with value from user or default if none
      if(sizeof($taxonomyfilters) > 0) {
        $stringfilters = implode($form_state['input']['choose_filter_type'], array_unique($taxonomyfilters));
        foreach($taxonomyfilters as $key => $value) {
          $form['filter_'.$key] = array(
            '#type' => 'hidden',
            '#value' => $value,
          ); 
        }
      } else {
        $stringfilters = "all";
        $form['filter_all'] = array(
          '#type' => 'hidden',
          '#value' => 'all',
        );
      }

      //sets keywords to any if no keywords
      if($form_state['input']['keywords'] != "") {
        $keywords = $form_state['input']['keywords'];
      } else {
        $keywords = " ";
      } 
      
      //sets the hidden fields of what was selected for searching
      $form['choose_type'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['input']['choose_type'],
      );  
      $form['choose_language'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['input']['choose_language'],
      );  
      $form['choose_filter_type'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['input']['choose_filter_type'],
      );  
      $form['keywords'] = array(
        '#type' => 'hidden',
        '#value' => $keywords,
      );
      
      //sets which button was clicked on
      $form['uri_id'] = array(
        '#type' => 'hidden',
        '#value' => $form_state['input']['uri_id'],
      );

      //sets which dam field on the node will be updated
      /*if(array_key_exists('uri_id', $form_state['input'])) {
        $form['uri_id'] = array(
          '#type' => 'hidden',
          '#value' => $form_state['input']['uri_id'],
        );
        dpm($form_state['input']['uri_id']);
      } else {
        $form['uri_id'] = array(
          '#type' => 'hidden',
          '#value' => array_shift(preg_grep('/'.$form_state['input']['uri_button'].'/', $form_state['input']['ajax_html_ids'])),
        );
        dpm($form_state['input']['ajax_html_ids']);
      }*/
    }

    //get all assets found from search and parse the json file
    $data = dam_api_search_assets($form_state['input']['choose_type'], $stringfilters, $keywords, $form_state['input']['choose_language']);
    $json_a = drupal_json_decode($data);
    $json_b = array();
    
    //removes all blank nodes in solr from the search results
    foreach($json_a['nodes'] as $key => $value) {
      if($value['node']['id'] != 0) {
        $json_b['nodes'][$key] = $value;
      }
    }

    // Check if we have found any result otherwise display no result found message.
    if ( isset($json_b['nodes']) && count($json_b['nodes']) > 0 ) {
      //finds what the size of the results is
      $result_size = (sizeof($json_b['nodes'])%15 > 0)?((intval(sizeof($json_b['nodes'])/15) + 1)) : (intval(sizeof($json_b['nodes'])/15));

      //determing which pagination page should be shown for the results
      if(sizeof($json_b['nodes']) > 0) {
        if(array_key_exists('triggering_element', $form_state)) {
          $result_page = intval(preg_replace('/(first|prev|page|next|last)/', '', $form_state['triggering_element']['#parents']['0']));
        } else {
          $result_page = 1;
        }
        
        //slices out the results which should be shown for the current pagination
        $pagedarray = array();
        $pagedarray = array_slice($json_b['nodes'],($result_page * 15 - 15), 15, true);
        
        //setup asset radio options for selecting assets
        $options = array();
        $options_attributes = array();

        //set up the different assets which can be selected and stores their data in the attributes of the option
        foreach($pagedarray as $item) {
          if($form_state['input']['choose_type'] == 'image') {
            $options[$item['node']['id']] = '<div>' . $item['node']['file'] . 
              '</div><img src="' . $item['node']['url'] . '" width="150px" height="auto" />';
            $options_attributes[$item['node']['id']] = array('did'=>$item['node']['id'], 
              'url'=>$item['node']['url'], 'alt'=>$item['node']['display_title'], 'caption'=>$item['node']['caption']);
          } else {
            $options[$item['node']['id']] = '<div><a href="' . $item['node']['url'] . '" target="_blank">' . $item['node']['file'] . '
              </a></div>' . $item['node']['title'] . " / " . $item['node']['display_title'];
            $options_attributes[$item['node']['id']] = array('did'=>$item['node']['id'], 
              'url'=>$item['node']['url'], 'alt'=>$item['node']['display_title'], 'caption'=>'');
          }
        }
    
        //set up asset radios with options
        $form['choose_asset'] = array(
          '#type' => 'radios',
          '#title' => t('Select Asset:'),
          '#options' => $options,
          '#options_attributes' => $options_attributes,
        );  
        
        //adds the pagination to the form
        dam_paging($result_page, $result_size, $form);
      } else {
        //set up no results
        $form['no_results'] = array(
          '#markup' => "<div>" . t('No Results') . "</div>",
        );
      }
    }
    else{
      $form['no_results'] = array(
        '#markup' => "<div>" . t('No Results') . "</div>",
      );
    }
      
    //set up back button
    $form['back'] = array(
      '#type' => 'button',
      '#value' => t('Back'),
      '#ajax' => array(
        'callback' => 'dam_uri_search_filter_callback', )
    );   
    //set up submit button 
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );
    return $form;
  //}
} 

/**
 * Drupal form to be put in a modal.
 */
function dam_form_upload_type_form($form, $form_state) {
  $form = array();
 
  //get json of content types and parse it
  $data = dam_api_get_supported_content_types();
  $json_a = drupal_json_decode($data);
  
  //set up the radio buttons options from the json
  $options = array();
  foreach($json_a as $key => $value) {
   $options[$json_a[$key]] = $json_a[$value];
  }

  //set up the radio butons with the options
  $form['choose_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select Type:'),
    '#options' => $options,
    '#default_value' => 'document',
    '#prefix' => '<div id="testingid">',
    '#suffix' => '</div>',
  );

  //set up the submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
    'callback' => 'dam_uri_upload_callback',
    'wrapper' => 'testingid'),
  );
  return $form;
} 

/**
 * Drupal form to be put in a modal.
 */
function dam_form_search_filter_form($form, $form_state) {
  $form = array();
  //dpm($form_state);
  //dpm($form_state['input']['_triggering_element_name']);
  //$testinga = array();
  //$tests = substr($form_state['input']['_triggering_element_name'], 7);
  //$ads = array();
  //$ads = $form_state['input']['ajax_html_ids'];
  //$patt = '/'.$tests.'/g';
  //dpm($patt);
  //$testinga = array_shift(preg_grep($patt, $ads));
  //dpm($testinga);
  //dpm($form_state['input']['ajax_html_ids']);
  //setup which button was clicked on
  //dpm($form_state);
  
  if(array_key_exists('_triggering_element_id', $form_state['input']) && $form_state['input']['_triggering_element_id'] != "edit-back") { 
    $form['uri_id'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['input']['_triggering_element_id'], //substr($form_state['input']['_triggering_element_name'], 7) . '-dam-uri',
    );
    /*$form['uri_adfid'] = array(
      '#type' => 'hidden',
      '#value' => $testinga . '-dam-uri',
    );*/
  } else {
    $form['uri_id'] = array(
      '#type' => 'hidden',
      '#value' => $form_state['input']['uri_id'],
    );
  }
  
  //get json of content types and parse it
  $data = dam_api_get_supported_content_types();
  $json_a = drupal_json_decode($data);
  
  //set up content type radio buttons options from the json
  $options = array();
  foreach($json_a as $key => $value) {
    $options[$json_a[$key]] = $json_a[$value];
  }

  //set up content type radio butons with the options
  $form['choose_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select Type:'),
    '#options' => $options,
    '#default_value' => 'document',
  );
    
  //set up filter type radio buttons
  $form['choose_filter_type'] = array(
    '#type' => 'radios',
    '#title' => t('Select Filter Type:'),
    '#options' => array(',' => t('Include all filters'), '+' => t('Include some filters')),
    '#default_value' => ',',
  );
  
  //set up keywords textfield
  $form['keywords'] = array(
    '#type' => 'textfield',
    '#title' => t('Search for:'),
  );  
  
  //gets the enabled languages for filtering 
  $data = dam_api_enabled_languages();
  $json_a = drupal_json_decode($data);
  
  $languageoptions = array();
  //displays all the enabled languages
  foreach($json_a["1"] as $key => $value) {
    $languageoptions[$key] = $value['name'];
  }
  $form['choose_language'] = array(
    '#type' => 'select',
    '#title' => t('Language:'),
    '#options' => $languageoptions,
  );

  //get json of filters and parse it
  $data = dam_api_get_metadata(array("content_types[executable]"=>"executable", "content_types[video]"=>"video", 
  "content_types[document]"=>"document", "content_types[image]"=>"image"));
  $json_a = drupal_json_decode($data);
 
  $selectmenus = array();
  
  //set up all taxonomy filters select menus
  foreach($json_a as $mainkey => $mainvalue){
    foreach($mainvalue as $key => $value) {
      //if filter is taxonomy and isn't Product Category then set up select menu
      if (!array_key_exists('label', $value) && $key != "Product Category"){
        $selectoptions = array();
        $selectoptions['all'] = t('- Any -');
        
        //set up taxonomy filter select menu options
        foreach($value as $subkey=>$subvalue){
          $selectoptions[$subvalue['tid']] = $subvalue['name'];
        }
        
        //set up taxonomy filter select menu
        $form['filter_'.$key] = array(
          '#type' => 'select',
          '#title' => t($key.':'),
          '#options' => $selectoptions,
        );
        //save the taxonomy filter names for use later
        $selectmenus[] = 'choose_'.$key;
      }
    }
  }
  //set up the submit button
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#ajax' => array(
      'callback' => 'dam_uri_search_callback',
      'wrapper' => 'testingid'),
  );
  return $form;
} 

/**
 * Validation for uploading correct file types into drupal
 */
function dam_form_upload_file_validate(&$element, &$form_state) {
  //custom validation and error message for each kind of asset
  switch($form_state['input']['choose_type']) {
    case "document":
      $upload_field = 'upload_asset_field_document';
      $error_text = t('Document must be valid .doc .docx .dot .htm .html .pdf .pot .pps .ppt .pptx .rtf .txt .xls .xlsx .zip');
      $validators = array(
        'file_validate_extensions' => array('doc docx dot htm html pdf ppt pot pps ppt pptx rtf txt xls xlsx zip'));
      break;      
    case "executable":
      $upload_field = 'upload_asset_field_executable_file';
      $error_text = t('Executable must be valid .bin .exe .gz .gzip .tar .tgz .zip');
      $validators = array(
        'file_validate_extensions' => array('bin exe gz gzip tar tgz zip'));
      break;
    case "image":
      $upload_field = 'upload_asset_field_image';
      $error_text = t('Image must be valid .gif .jpeg .jpg .png .tif .zip');
      $validators = array(
        'file_validate_is_image' => array(),
        'file_validate_extensions' => array('gif jpg jpeg png tif zip'));
      break;   
    case "video":
      $upload_field = 'upload_asset_field_uploaded_video';
      $error_text = t('Video must be valid .avi .f4v .flv .m4v .mov .mp4 .mpeg .mpg .ogg .ogv .vp5 .vp6 .webm .wmv');
      $validators = array(
        'file_validate_extensions' => array('avi f4v flv m4v mov mp4 mpeg mpg ogg ogv vp5 vp6 webm wmv'));
      break;   
  }
  //checks the file if it is valid and displays errors
  $file = file_save_upload($upload_field, $validators); 
  if(!$file) {
    form_error($element, $error_text);
  }
}

function dam_form_filter_taxonomy($array, $filter_key) {
  $filter_array = array();
  
  //filters blank taxonomys and all from the results for filtering
  foreach($array as $key => $value) {
    if((strpos($key, $filter_key) === 0) && $value != "" && $value != "all") {
      $filter_array[str_replace($filter_key, "", $key)] = $value;
    }
  }
  return $filter_array;
}

/**
 * Drupal form submit handlers.
 */
function dam_form_search_form_submit(&$form, &$form_state) {
  //loads javascript and sends the chosen values back to parent form
  drupal_add_js(drupal_get_path('module', 'dam_uri') . '/js/dam.js');
  drupal_add_js(array('dam_uri' => array(
    'did' => $form_state['complete form']['choose_asset']['#options_attributes'][$form_state['input']['choose_asset']]['did'],
    'url' => $form_state['complete form']['choose_asset']['#options_attributes'][$form_state['input']['choose_asset']]['url'], 
    'alt' => $form_state['complete form']['choose_asset']['#options_attributes'][$form_state['input']['choose_asset']]['alt'], 
    'caption' => $form_state['complete form']['choose_asset']['#options_attributes'][$form_state['input']['choose_asset']]['caption'], 
    'id' => $form_state['input']['uri_id']//.$form_state['input']['uri_button']
    )), 'setting');

  // Close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
}  
function dam_form_upload_form_submit(&$form, &$form_state) {
  //if($form['#form_id'] == 'dam_uri_upload_form') {
  // Generate the new link using the submitted text value.
  global $base_url;
  //$link = $base_url . '/sites/default/files/' . $form_state['values']['keywords'];

  $node_array = array();
  $node_array['content_type'] = $form_state['values']['choose_type'];
  array_merge($node_array, dam_form_filter_taxonomy($form_state['values'], "upload_asset_"));
  /*foreach($form_state['values'] as $key => $value) {
    //dpm(preg_match('upload_asset_', $key));
    if((strpos($key, 'upload_asset_') === 0) && $value != "" && $value != "all") {
      $node_array[str_replace("upload_asset_", "", $key)] = $value;
    }
  }*/
  
  
  
  
  //  content_type=document&title=adfaldkj&field_display_title=aewiou34&language=en

// {"type":"document","language":"en","title":"Review","field_display_title":{"en":{"0":{"value":"adkfjladfklj"}}}}
  //{"type":"document","title":"Review","language":"en","field_display_title":{"en":{"0":{"value":"adkfjladfklj"}}},"field_document":{"en":{"0":{"fid":"54","display":1,"description":""}}}}
  //{"type":"document","title":"Review","language":"en","field_display_title":{"en":{"0":{"value":"adkfjladfklj"}}},"field_document":{"und":[{"fid":"54"}]}}
  
  //{"title":"test_node1","type":"document","language":"en","field_display_title":{"und":[{"value":"oawitjaj"}]},"field_document":{"und":[{"fid":54}]}}
  
//dpm($node_array);
dam_form_add_content($node_array);
  //$validators = array();
  //$file = file_save_upload('file', $validators, 'path');
  //file_set_status($file, FILE_STATUS_PERMANENT);
  //dpm($form_state['values']['choose_type']);
  //dpm($form_state);
  /*
  if(array_key_exists("upload_asset_field_document", $form_state['values'])) {
    $file = file_save_upload('upload_asset_field_document');
  }
  elseif(array_key_exists("upload_asset_field_executable_file", $form_state['values'])) {
    $file = file_save_upload('upload_asset_field_executable_file');
  }
  elseif(array_key_exists("upload_asset_field_image", $form_state['values'])) {
    $file = file_save_upload('upload_asset_field_image');
  }
  elseif(array_key_exists("upload_asset_field_uploaded_video", $form_state['values'])) {
    $file = file_save_upload('upload_asset_field_uploaded_video');
  }

  //$file = file_save_upload('upload_file');
  
  $link = $file->uri;*/
  
  // dpm($link);
  // Change status to permanent.
  //$file->status = FILE_STATUS_PERMANENT;
  //$file->status = 1;
  //file_save($file);
  // Save.
  //$uploaded = file_save($file);
  //if ($uploaded == TRUE) {
  // drupal_set_message(t('The file has been uploaded.'));
  // dpm(file_create_url($file->uri));
  //}
     
  // Close the modal.
  $form_state['ajax_commands'][] = ctools_modal_command_dismiss();
  
  // Tell the browser to replace the old link with the new one.
  $form_state['ajax_commands'][] = ajax_command_replace('#edit-field-example-field-tt-en-0-dam-uri-uri[id=""', '<input type="text" class="form-text" maxlength="128" size="60" value="'.$link.'" name="field_dam_uri[und][0][dam_uri][uri]" id="edit-field-dam-uri-und-0-dam-uri-uri">');
//}
}
function dam_form_search_filter_form_submit(&$form, &$form_state) {
  // Close the modal.
  //$form_state['ajax_commands'][] = ctools_modal_command_dismiss();
} 
function dam_form_upload_type_form_submit(&$form, &$form_state) {
  // Close the modal.
  //$form_state['ajax_commands'][] = ctools_modal_command_dismiss();
} 
